import pandas
import numpy
import csv

dict_num = {46: 'CV1A_12', 76: 'CV1A_3', 106: 'CV1A_45', 139: 'CV2B', 169: 'CV3', 200: 'CV4A', 230: 'CV4A_12', 260: 'CV4A_3', 290: 'CV4A_45', 321: 'CV5A', 366: 'CO1B', 396: 'CO1B_12', 426: 'CO1B_3', 456: 'CO1B_45', 487: 'CO3', 518: 'CO4A_SI', 548: 'CO4A_NO', 582: 'CO4B', 612: 'CO4C', 663: 'CO14B', 708: 'A2', 738: 'A2A', 811: 'ED3C', 849: 'ED4A_12', 879: 'ED4A_3', 909: 'ED4A_45', 940: 'ED4B', 971: 'ED4A_123', 1001: 'ED4A2_45', 1036: 'ED4F', 1066: 'ED4G', 1097: 'ED4I', 1136: 'ED5', 1173: 'ED5B', 1203: 'ED6B', 1234: 'ED8B', 1274: 'ED10', 1315: 'ED18', 1345: 'ED19', 1375: 'ED20', 1416: 'ED31', 1451: 'SA1A', 1508: 'SA2D_123', 1540: 'SA3B', 1572: 'SA3D_123', 1602: 'SA3D_45', 1636: 'SA4A_12', 1666: 'SA4A_3', 1696: 'SA4A_45', 1731: 'SA5', 1772: 'SA13', 1804: 'SA15', 1834: 'SA16', 1869: 'SA19B_123', 1899: 'SA19B_45', 1931: 'SP1A', 1962: 'SP1A2', 1993: 'SP1B_12', 2023: 'SP1B_3', 2053: 'SP1B_45', 2085: 'SP1D', 2115: 'SP1D_123', 2145: 'SP1D_45', 2175: 'SP1E_123', 2206: 'SP2A_12', 2236: 'SP2A_3', 2266: 'SP2A_45', 2298: 'SP2B_123', 2328: 'SP2B_45', 2358: 'SP2C_123', 2391: 'SP3A_12', 2421: 'SP3A_3', 2451: 'SP3A_45', 2482: 'SP3C_123', 2512: 'SP3B_123', 2542: 'SP3B_45', 2576: 'SP4B_12', 2606: 'SP4B_3', 2636: 'SP4B_45', 2667: 'SP4C_123', 2697: 'SP4C_45', 2727: 'SP4D_123', 2760: 'SP5B_12', 2790: 'SP5B_3', 2820: 'SP5B_45', 2853: 'SP6A_12', 2883: 'SP6A_3', 2913: 'SP6A_45', 2944: 'SP6C_123', 2974: 'SP6C_45', 3004: 'SP6D_123', 3037: 'SP7A_12', 3067: 'SP7A_3', 3097: 'SP7A_45', 3128: 'SP7B_123', 3158: 'SP7B_45', 3188: 'SP7C_123', 3224: 'SP8B_12', 3254: 'SP8B_3', 3284: 'SP8B_45', 3316: 'SP9B_12', 3346: 'SP9B_3', 3376: 'SP9B_45', 3413: 'VS0A_123', 3443: 'VS0A_12', 3473: 'VS0A_3', 3503: 'VS0A_45', 3548: 'VS1E', 3580: 'VS2A_12', 3610: 'VS2A_3', 3640: 'VS2A_45', 3671: 'VS2B_123', 3701: 'VS2B_45', 3733: 'VS3A_12', 3763: 'VS3A_3', 3793: 'VS3A_45', 3825: 'VS3C_123', 3855: 'VS3C_45', 3887: 'VS4A_12', 3917: 'VS4A_3', 3947: 'VS4A_45', 3978: 'VS4C_123', 4008: 'VS4C_45', 4039: 'VS5A_12', 4069: 'VS5A_3', 4099: 'VS5A_45', 4130: 'VS5C_123', 4160: 'VS5C_45', 4198: 'VS6A', 4229: 'VS7A_12', 4259: 'VS7A_3', 4289: 'VS7A_45', 4320: 'VS7C', 4372: 'VS7H', 4404: 'VS8A_123', 4434: 'VS8A_45', 4480: 'VS9', 4510: 'VS9A', 4547: 'VS10H', 4580: 'VS14', 4611: 'VS15A', 4642: 'VS16', 4675: 'VS17A_SI', 4705: 'VS17A_NO', 4740: 'VS17C_CAL_05', 4770: 'VS17D_CAL_05', 4809: 'VS19A', 4839: 'VS19A_12', 4869: 'VS19A_3', 4899: 'VS19A_45', 4946: 'VS25', 4976: 'PC1', 5007: 'PC2', 5037: 'PC2A', 5067: 'PC13B', 5097: 'PC13A', 5198: 'PC5A', 5228: 'PC5B', 5259: 'PC6A', 5289: 'PC7', 5320: 'PC7B', 5352: 'PC7E', 5389: 'PC28A', 5419: 'PC28B', 5462: 'PC15A', 5555: 'PC20C', 5585: 'PC20D', 5615: 'PC21', 5660: 'PC24', 5694: 'PC26', 5734: 'RC1', 5765: 'RC2', 5953: 'RC10', 5983: 'RC11', 6029: 'RC17', 6060: 'RC19', 6091: 'RC20_123', 6121: 'RC20_45', 6152: 'RC21_345', 6183: 'RC22_345', 6214: 'RC23_345', 6256: 'DE3', 6286: 'DE4', 6316: 'DE5', 6346: 'CR1', 6383: 'CR1D', 6413: 'CR1E', 6444: 'CR1F_12', 6474: 'CR1F_3', 6504: 'CR1F_45', 6617: 'CR2A_12', 6647: 'CR2A_3', 6677: 'CR2A_45', 6708: 'CR3', 6739: 'CR3B', 6770: 'CR4A_12', 6800: 'CR4A_3', 6830: 'CR4A_45', 6869: 'CR6', 6902: 'COM1', 6943: 'MV3A', 6976: 'MV3B_1', 7007: 'MV4_123', 7037: 'MV4_45', 7068: 'MV4A_12', 7098: 'MV4A_3', 7128: 'MV4A_45', 7159: 'MV4B_123', 7206: 'MV6E_123', 7236: 'MV6E_45', 7267: 'MV6G', 7346: 'MV14A_12', 7376: 'MV14A_3', 7406: 'MV14A_45', 7438: 'MV15A_PO', 7468: 'MV15A_NE', 7528: 'MV15B_PO', 7558: 'MV15B_NE', 7624: 'MV20', 7656: 'MV22', 7741: 'MV34', 7774: 'MV36', 7804: 'MV37', 7850: 'MV40_123', 7880: 'MV40_45', 7910: 'MV41', 7940: 'MV42', 7971: 'MV43_123', 8002: 'MV44_123', 8033: 'EP1A_12', 8063: 'EP1A_3', 8093: 'EP1A_45', 8131: 'EP3A', 8162: 'EP4A', 8193: 'EP5A_SI', 8223: 'EP5A_NO', 8253: 'MA4', 8307: 'MA3_123', 8337: 'MA3_45', 8418: 'MA13', 8459: 'MA17', 8547: 'MC1A', 8577: 'MC2A', 8607: 'MC3A', 8637: 'MC4A', 8667: 'MC5A', 8697: 'MC6A', 8727: 'MC7A', 8757: 'MC8A', 8790: 'MC21A_1', 8820: 'MC21A_2', 8850: 'MC21A_3', 8880: 'MC21A_4', 8910: 'MC21A_5', 8940: 'MC21A_6', 8970: 'MC21A_7', 9000: 'MC21A_8', 9030: 'MC21A_9', 9060: 'MC21A_10', 9090: 'MC21A_11', 9120: 'MC21A_12', 9150: 'MC21A_13', 9180: 'MC21A_14', 9210: 'MC21A_15', 9240: 'MC21A_16', 9270: 'MC21A_17', 9300: 'MC21A_18', 9330: 'MC21A_19', 9360: 'MC21A_20', 9402: 'MC22A', 9439: 'GP0B', 11100: 'GP5', 11135: 'PR1', 11168: 'PR2A', 11688: 'PR7A_12', 11718: 'PR7A_3', 11748: 'PR7A_45', 11779: 'PR7C_1', 11809: 'PR7C_2', 11846: 'PR13_12', 11876: 'PR13_3', 11906: 'PR13_45', 11937: 'PR14_123', 11968: 'PR15_123', 11999: 'PR16_123', 12033: 'GG3A_123', 12063: 'GG3A_45', 12096: 'GG5B', 12126: 'GG5B_12', 12156: 'GG5B_3', 12186: 'GG5B_45', 12230: 'GG10C', 12262: 'GG13', 12294: 'GG15', 12324: 'CC1A', 12358: 'CC3', 12388: 'CC4', 12418: 'CC4A', 12448: 'CC4B', 12478: 'CC4C', 12510: 'CC5A_12', 12540: 'CC5A_3', 12570: 'CC5A_45', 12661: 'CC9C', 12691: 'CC9A', 12721: 'CC10', 12752: 'CC10_CAR_08', 12785: 'CC12', 12820: 'CC15A', 12854: 'CC19_CAR_05', 12886: 'CC23', 12917: 'MG1', 12965: 'MG2', 13003: 'MG3', 13033: 'MG3A', 13064: 'MG5A'}

list_num = [46, 76, 106, 139, 169, 200, 230, 260, 290, 321, 366, 396, 426, 456, 487, 518, 548, 582, 612, 663, 708, 738, 811, 849, 879, 909, 940, 971, 1001, 1036, 1066, 1097, 1136, 1173, 1203, 1234, 1274, 1315, 1345, 1375, 1416, 1451, 1508, 1540, 1572, 1602, 1636, 1666, 1696, 1731, 1772, 1804, 1834, 1869, 1899, 1931, 1962, 1993, 2023, 2053, 2085, 2115, 2145, 2175, 2206, 2236, 2266, 2298, 2328, 2358, 2391, 2421, 2451, 2482, 2512, 2542, 2576, 2606, 2636, 2667, 2697, 2727, 2760, 2790, 2820, 2853, 2883, 2913, 2944, 2974, 3004, 3037, 3067, 3097, 3128, 3158, 3188, 3224, 3254, 3284, 3316, 3346, 3376, 3413, 3443, 3473, 3503, 3548, 3580, 3610, 3640, 3671, 3701, 3733, 3763, 3793, 3825, 3855, 3887, 3917, 3947, 3978, 4008, 4039, 4069, 4099, 4130, 4160, 4198, 4229, 4259, 4289, 4320, 4372, 4404, 4434, 4480, 4510, 4547, 4580, 4611, 4642, 4675, 4705, 4740, 4770, 4809, 4839, 4869, 4899, 4946, 4976, 5007, 5037, 5067, 5097, 5198, 5228, 5259, 5289, 5320, 5352, 5389, 5419, 5462, 5555, 5585, 5615, 5660, 5694, 5734, 5765, 5953, 5983, 6029, 6060, 6091, 6121, 6152, 6183, 6214, 6256, 6286, 6316, 6346, 6383, 6413, 6444, 6474, 6504, 6617, 6647, 6677, 6708, 6739, 6770, 6800, 6830, 6869, 6902, 6943, 6976, 7007, 7037, 7068, 7098, 7128, 7159, 7206, 7236, 7267, 7346, 7376, 7406, 7438, 7468, 7528, 7558, 7624, 7656, 7741, 7774, 7804, 7850, 7880, 7910, 7940, 7971, 8002, 8033, 8063, 8093, 8131, 8162, 8193, 8223, 8253, 8307, 8337, 8418, 8459, 8547, 8577, 8607, 8637, 8667, 8697, 8727, 8757, 8790, 8820, 8850, 8880, 8910, 8940, 8970, 9000, 9030, 9060, 9090, 9120, 9150, 9180, 9210, 9240, 9270, 9300, 9330, 9360, 9402, 9439, 11100, 11135, 11168, 11688, 11718, 11748, 11779, 11809, 11846, 11876, 11906, 11937, 11968, 11999, 12033, 12063, 12096, 12126, 12156, 12186, 12230, 12262, 12294, 12324, 12358, 12388, 12418, 12448, 12478, 12510, 12540, 12570, 12661, 12691, 12721, 12752, 12785, 12820, 12854, 12886, 12917, 12965, 13003, 13033, 13064]

print("Reading File")
data = pandas.read_csv("output_2.csv", delimiter = ",",dtype=numpy.string_)
print("Finshed Reading File")
n, m = data.shape
jump = 30
i = 0
table = pandas.DataFrame()
iternum = 0
while i < n:
    while iternum < len(list_num):
        next_lim = list_num[iternum]
        print(next_lim)
        extract_cols = data.iloc[:,i:next_lim-1]
        working_cols = data.iloc[:,next_lim-1]
        j = 0
        while j < jump-1:
            working_cols = working_cols + ";" + data.iloc[:,next_lim+j]
            j = j + 1
        extract_cols = pandas.concat([extract_cols,working_cols], axis = 1, join='inner')
        extract_cols.rename(columns={0:dict_num[next_lim]}, inplace=True)
        if i == 1:
            table = extract_cols
        else:
            table = pandas.concat([table,extract_cols], axis = 1, join='inner')
        iternum = iternum + 1
        i = next_lim + jump-1
    table = pandas.concat([table,data.iloc[:,i:-1]], axis = 1)
    table = pandas.concat([table,data.iloc[:,-1]], axis = 1)
    i = n
print("Writing File")
table.to_csv("output_3.csv",quoting=csv.QUOTE_NONNUMERIC, encoding="utf-8", na_rep = numpy.nan, index = False)
print("End of Program")
